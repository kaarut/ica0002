Wed Dec  8 18:59:49 EET 2021
+ hostname
MBP-H8D.local
+ ansible-playbook infra.yaml --diff

PLAY [Setup] *******************************************************************

TASK [Gathering Facts] *********************************************************
ok: [vm2]
ok: [vm1]

TASK [init : Update APT cache] *************************************************
ok: [vm2]
ok: [vm1]

TASK [init : hostname] *********************************************************
ok: [vm2]
ok: [vm1]

TASK [node_exporter : Install APT package] *************************************
ok: [vm2]
ok: [vm1]

TASK [node_exporter : Enable node exporter] ************************************
ok: [vm2]
ok: [vm1]

TASK [rsyslog : Install Rsyslog] ***********************************************
ok: [vm2]
ok: [vm1]

TASK [rsyslog : config rsyslog] ************************************************
ok: [vm1]
ok: [vm2]

TASK [rsyslog : start rsyslog] *************************************************
ok: [vm1]
ok: [vm2]

PLAY [DNS servers] *************************************************************

TASK [Gathering Facts] *********************************************************
ok: [vm2]
ok: [vm1]

TASK [bind : Install bind9] ****************************************************
ok: [vm2]
ok: [vm1]

TASK [bind : Installing the options] *******************************************
ok: [vm2]
ok: [vm1]

TASK [bind : Installing the db.domain] *****************************************
skipping: [vm1]
ok: [vm2]

TASK [bind : Installing the db.reverse] ****************************************
skipping: [vm1]
ok: [vm2]

TASK [bind : Installing the local] *********************************************
ok: [vm2]
ok: [vm1]

TASK [bind_exporter : Install bind9 exporter] **********************************
ok: [vm2]
ok: [vm1]

TASK [bind_exporter : Verify bind9 exporter is running] ************************
ok: [vm2]
ok: [vm1]

PLAY [DNS records] *************************************************************

TASK [Gathering Facts] *********************************************************
ok: [vm2]

TASK [dns_records : Set A records] *********************************************
ok: [vm2] => (item={'key': 'backup', 'value': '192.168.42.156'})

TASK [dns_records : Set CNAME records] *****************************************
ok: [vm2] => (item={'key': 'grafana', 'value': 'vm1'})
ok: [vm2] => (item={'key': 'influxdb', 'value': 'vm2'})
ok: [vm2] => (item={'key': '1b1', 'value': 'vm1'})
ok: [vm2] => (item={'key': '1b2', 'value': 'vm2'})
ok: [vm2] => (item={'key': 'mysql1', 'value': 'vm1'})
ok: [vm2] => (item={'key': 'mysql2', 'value': 'vm2'})
ok: [vm2] => (item={'key': 'ns1', 'value': 'vm2'})
ok: [vm2] => (item={'key': 'prometheus', 'value': 'vm1'})
ok: [vm2] => (item={'key': 'web1', 'value': 'vm1'})
ok: [vm2] => (item={'key': 'web2', 'value': 'vm2'})

PLAY [Init] ********************************************************************

TASK [Gathering Facts] *********************************************************
ok: [vm2]
ok: [vm1]

TASK [init : Update APT cache] *************************************************
ok: [vm2]
ok: [vm1]

TASK [init : hostname] *********************************************************
ok: [vm1]
ok: [vm2]

TASK [backup : Add the user "backup" and generate keys] ************************
ok: [vm2]
ok: [vm1]

TASK [backup : ansible create directory] ***************************************
ok: [vm1]
ok: [vm2]

TASK [backup : Install duplicity] **********************************************
ok: [vm1]
ok: [vm2]

TASK [backup : Touch a ssh known hosts file] ***********************************
ok: [vm1]
ok: [vm2]

TASK [docker : Docker package] *************************************************
ok: [vm1]
ok: [vm2]

TASK [docker : IPtables template] **********************************************
ok: [vm2]
ok: [vm1]

TASK [docker : Iptables restore] ***********************************************
[WARNING]: Attempts to restore iptables state without rollback in case of
mistake may lead the ansible controller to loose access to the hosts and never
regain it before fixing firewall rules through a serial console, or any other
way except SSH. Please set task attribute 'poll' (=15) to 0, and 'async' (=0)
to a value >2 and not greater than 'ansible_timeout' (=10) (recommended).
[WARNING]: Attempts to restore iptables state without rollback in case of
mistake may lead the ansible controller to loose access to the hosts and never
regain it before fixing firewall rules through a serial console, or any other
way except SSH. Please set task attribute 'poll' (=15) to 0, and 'async' (=0)
to a value >2 and not greater than 'ansible_timeout' (=10) (recommended).
ok: [vm1]
ok: [vm2]

TASK [docker : Docker service] *************************************************
ok: [vm2]
ok: [vm1]

TASK [dns_resolve : replace with new resolv file] ******************************
ok: [vm1]
ok: [vm2]

PLAY [Web server] **************************************************************

TASK [Gathering Facts] *********************************************************
ok: [vm2]
ok: [vm1]

TASK [agama : Linux user agama] ************************************************
ok: [vm2]
ok: [vm1]

TASK [agama : Dir for agama] ***************************************************
ok: [vm1]
ok: [vm2]

TASK [agama : Download the app] ************************************************
ok: [vm2]
ok: [vm1]

TASK [agama : Build Agama image] ***********************************************
ok: [vm2]
ok: [vm1]

TASK [agama : Agama container] *************************************************
ok: [vm2]
ok: [vm1]

TASK [agama : Agama container 2] ***********************************************
ok: [vm1]
ok: [vm2]

TASK [nginx : Installing Nginx package] ****************************************
ok: [vm1]
ok: [vm2]

TASK [nginx : Replace the default Nginx conf file] *****************************
ok: [vm1]
ok: [vm2]

TASK [nginx : start nginx] *****************************************************
ok: [vm2]
ok: [vm1]

TASK [haproxy : Install haproxy & keepalived] **********************************
ok: [vm1]
ok: [vm2]

TASK [haproxy : Replace haproxy cfg] *******************************************
ok: [vm1]
ok: [vm2]

TASK [haproxy : Turn on both services] *****************************************
ok: [vm1]
ok: [vm2]

TASK [haproxy_exporter : Install haproxy exporter] *****************************
ok: [vm2]
ok: [vm1]

TASK [haproxy_exporter : Change the default config] ****************************
ok: [vm2]
ok: [vm1]

TASK [keepalived : Install haproxy & keepalived] *******************************
ok: [vm2]
ok: [vm1]

TASK [keepalived : Replace keepalived conf] ************************************
ok: [vm1]
ok: [vm2]

TASK [keepalived : Add the script] *********************************************
ok: [vm1]
ok: [vm2]

TASK [keepalived : Install keepalived monitoring] ******************************
ok: [vm1]
ok: [vm2]

TASK [keepalived : Create keepalived_monitor] **********************************
ok: [vm1]
ok: [vm2]

TASK [keepalived : Start "{{ item }}"] *****************************************
ok: [vm2] => (item=keepalived)
ok: [vm1] => (item=keepalived)
ok: [vm1] => (item=keepalived_monitor)
ok: [vm2] => (item=keepalived_monitor)

PLAY [Prometheus] **************************************************************

TASK [prometheus : Install APT package] ****************************************
ok: [vm1]

TASK [prometheus : Configure the template] *************************************
ok: [vm1]

TASK [prometheus : Configure the prometheus config] ****************************
ok: [vm1]

TASK [prometheus : start prometheus] *******************************************
ok: [vm1]

PLAY [MYSQL servers] ***********************************************************

TASK [mysql : Install MYSQL-server] ********************************************
ok: [vm1]
ok: [vm2]

TASK [mysql : Replace the default mysql conf file] *****************************
ok: [vm1]
ok: [vm2]

TASK [mysql : start mysql server] **********************************************
ok: [vm2]
ok: [vm1]

TASK [mysql : MySQL database for Agama] ****************************************
ok: [vm1]
ok: [vm2]

TASK [mysql : MySQL user for Agama] ********************************************
ok: [vm1]
ok: [vm2]

TASK [mysql : MySQL user for replication] **************************************
ok: [vm1]
ok: [vm2]

TASK [mysql : Read only ON/OFF] ************************************************
ok: [vm1]
ok: [vm2]

TASK [mysql_exporter : MySQL user] *********************************************
ok: [vm1]
ok: [vm2]

TASK [mysql_exporter : Create config] ******************************************
ok: [vm1]
ok: [vm2]

TASK [mysql_exporter : Install mysqld exporter] ********************************
ok: [vm2]
ok: [vm1]

TASK [mysql_exporter : Verify exporter is running] *****************************
ok: [vm2]
ok: [vm1]

TASK [mysql_exporter : Change slave config] ************************************
ok: [vm2]
ok: [vm1]

TASK [mysql_backup : create directory] *****************************************
ok: [vm1]
ok: [vm2]

TASK [mysql_backup : Replace mysql conf file] **********************************
ok: [vm1]
ok: [vm2]

TASK [mysql_backup : MySQL user] ***********************************************
ok: [vm1]
ok: [vm2]

TASK [mysql_backup : Make a cronjob] *******************************************
ok: [vm1]
ok: [vm2]

PLAY [Exporters] ***************************************************************

TASK [Gathering Facts] *********************************************************
ok: [vm1]
ok: [vm2]

TASK [nginx : Installing Nginx package] ****************************************
ok: [vm1]
ok: [vm2]

TASK [nginx : Replace the default Nginx conf file] *****************************
ok: [vm1]
ok: [vm2]

TASK [nginx : start nginx] *****************************************************
ok: [vm1]
ok: [vm2]

TASK [nginx_exporter : Install nginx-exporter] *********************************
ok: [vm1]
ok: [vm2]

TASK [nginx_exporter : Verify exporter is running] *****************************
ok: [vm1]
ok: [vm2]

PLAY [Grafana] *****************************************************************

TASK [grafana : Create all Grafana directories] ********************************
ok: [vm1] => (item=/opt/grafana)
ok: [vm1] => (item=/opt/grafana/provisioning/dashboards)
ok: [vm1] => (item=/opt/grafana/provisioning/datasources)

TASK [grafana : Grafana config] ************************************************
ok: [vm1]

TASK [grafana : Grafana datasources] *******************************************
ok: [vm1] => (item=sample.yaml)
ok: [vm1] => (item=latency.yaml)
ok: [vm1] => (item=telegraf.yaml)

TASK [grafana : Grafana dashboard] *********************************************
ok: [vm1]

TASK [grafana : Grafana dashboard panels] **************************************
ok: [vm1] => (item=main.json)
ok: [vm1] => (item=mysql.json)
ok: [vm1] => (item=syslog.json)

TASK [grafana : Grafana Docker container] **************************************
ok: [vm1]

PLAY [Loggers] *****************************************************************

TASK [pinger : Install fping] **************************************************
ok: [vm1]
ok: [vm2]

TASK [pinger : Add the user "pinger" and generate keys] ************************
ok: [vm1]
ok: [vm2]

TASK [pinger : Copy pinger conf] ***********************************************
ok: [vm1]
ok: [vm2]

TASK [pinger : Copy the pinger.sh] *********************************************
ok: [vm1]
ok: [vm2]

TASK [pinger : Create a pinger.service] ****************************************
ok: [vm1]
ok: [vm2]

TASK [pinger : Start & enable the pinger if not started] ***********************
ok: [vm2]
ok: [vm1]

PLAY [influxdb_servers] ********************************************************

TASK [Gathering Facts] *********************************************************
ok: [vm2]

TASK [influxdb : Add an Apt signing key, uses whichever key is at the URL] *****
ok: [vm2]

TASK [influxdb : add this repo for stable release] *****************************
ok: [vm2]

TASK [influxdb : Install influxdb and telegraf] ********************************
ok: [vm2]

TASK [influxdb : Configure influxdb] *******************************************
ok: [vm2]

TASK [influxdb : Configure telegraf] *******************************************
ok: [vm2]

TASK [influxdb : Verify apps are running] **************************************
ok: [vm2] => (item=influxdb)
ok: [vm2] => (item=telegraf)

TASK [influxdb_backup : create influxdb dir] ***********************************
ok: [vm2]

TASK [influxdb_backup : create restore dir] ************************************
ok: [vm2]

TASK [influxdb_backup : Make a cronjob] ****************************************
ok: [vm2]

TASK [influxdb_exporter : Download binary file] ********************************
ok: [vm2]

TASK [influxdb_exporter : Create influxdb_exporter service] ********************
ok: [vm2]

TASK [influxdb_exporter : Copy influxdb_exporter.sh] ***************************
ok: [vm2]

TASK [influxdb_exporter : Start influxdb_exporter] *****************************
ok: [vm2]

PLAY RECAP *********************************************************************
vm1                        : ok=85   changed=0    unreachable=0    failed=0    skipped=2    rescued=0    ignored=0   
vm2                        : ok=94   changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   

+ ansible-playbook infra.yaml --diff

PLAY [Setup] *******************************************************************

TASK [Gathering Facts] *********************************************************
ok: [vm2]
ok: [vm1]

TASK [init : Update APT cache] *************************************************
ok: [vm2]
ok: [vm1]

TASK [init : hostname] *********************************************************
ok: [vm1]
ok: [vm2]

TASK [node_exporter : Install APT package] *************************************
ok: [vm2]
ok: [vm1]

TASK [node_exporter : Enable node exporter] ************************************
ok: [vm2]
ok: [vm1]

TASK [rsyslog : Install Rsyslog] ***********************************************
ok: [vm2]
ok: [vm1]

TASK [rsyslog : config rsyslog] ************************************************
ok: [vm2]
ok: [vm1]

TASK [rsyslog : start rsyslog] *************************************************
ok: [vm1]
ok: [vm2]

PLAY [DNS servers] *************************************************************

TASK [Gathering Facts] *********************************************************
ok: [vm2]
ok: [vm1]

TASK [bind : Install bind9] ****************************************************
ok: [vm2]
ok: [vm1]

TASK [bind : Installing the options] *******************************************
ok: [vm2]
ok: [vm1]

TASK [bind : Installing the db.domain] *****************************************
skipping: [vm1]
ok: [vm2]

TASK [bind : Installing the db.reverse] ****************************************
skipping: [vm1]
ok: [vm2]

TASK [bind : Installing the local] *********************************************
ok: [vm2]
ok: [vm1]

TASK [bind_exporter : Install bind9 exporter] **********************************
ok: [vm1]
ok: [vm2]

TASK [bind_exporter : Verify bind9 exporter is running] ************************
ok: [vm2]
ok: [vm1]

PLAY [DNS records] *************************************************************

TASK [Gathering Facts] *********************************************************
ok: [vm2]

TASK [dns_records : Set A records] *********************************************
ok: [vm2] => (item={'key': 'backup', 'value': '192.168.42.156'})

TASK [dns_records : Set CNAME records] *****************************************
ok: [vm2] => (item={'key': 'grafana', 'value': 'vm1'})
ok: [vm2] => (item={'key': 'influxdb', 'value': 'vm2'})
ok: [vm2] => (item={'key': '1b1', 'value': 'vm1'})
ok: [vm2] => (item={'key': '1b2', 'value': 'vm2'})
ok: [vm2] => (item={'key': 'mysql1', 'value': 'vm1'})
ok: [vm2] => (item={'key': 'mysql2', 'value': 'vm2'})
ok: [vm2] => (item={'key': 'ns1', 'value': 'vm2'})
ok: [vm2] => (item={'key': 'prometheus', 'value': 'vm1'})
ok: [vm2] => (item={'key': 'web1', 'value': 'vm1'})
ok: [vm2] => (item={'key': 'web2', 'value': 'vm2'})

PLAY [Init] ********************************************************************

TASK [Gathering Facts] *********************************************************
ok: [vm2]
ok: [vm1]

TASK [init : Update APT cache] *************************************************
ok: [vm2]
ok: [vm1]

TASK [init : hostname] *********************************************************
ok: [vm1]
ok: [vm2]

TASK [backup : Add the user "backup" and generate keys] ************************
ok: [vm2]
ok: [vm1]

TASK [backup : ansible create directory] ***************************************
ok: [vm2]
ok: [vm1]

TASK [backup : Install duplicity] **********************************************
ok: [vm2]
ok: [vm1]

TASK [backup : Touch a ssh known hosts file] ***********************************
ok: [vm1]
ok: [vm2]

TASK [docker : Docker package] *************************************************
ok: [vm1]
ok: [vm2]

TASK [docker : IPtables template] **********************************************
ok: [vm1]
ok: [vm2]

TASK [docker : Iptables restore] ***********************************************
[WARNING]: Attempts to restore iptables state without rollback in case of
mistake may lead the ansible controller to loose access to the hosts and never
regain it before fixing firewall rules through a serial console, or any other
way except SSH. Please set task attribute 'poll' (=15) to 0, and 'async' (=0)
to a value >2 and not greater than 'ansible_timeout' (=10) (recommended).
[WARNING]: Attempts to restore iptables state without rollback in case of
mistake may lead the ansible controller to loose access to the hosts and never
regain it before fixing firewall rules through a serial console, or any other
way except SSH. Please set task attribute 'poll' (=15) to 0, and 'async' (=0)
to a value >2 and not greater than 'ansible_timeout' (=10) (recommended).
ok: [vm2]
ok: [vm1]

TASK [docker : Docker service] *************************************************
ok: [vm1]
ok: [vm2]

TASK [dns_resolve : replace with new resolv file] ******************************
ok: [vm1]
ok: [vm2]

PLAY [Web server] **************************************************************

TASK [Gathering Facts] *********************************************************
ok: [vm2]
ok: [vm1]

TASK [agama : Linux user agama] ************************************************
ok: [vm2]
ok: [vm1]

TASK [agama : Dir for agama] ***************************************************
ok: [vm1]
ok: [vm2]

TASK [agama : Download the app] ************************************************
ok: [vm2]
ok: [vm1]

TASK [agama : Build Agama image] ***********************************************
ok: [vm2]
ok: [vm1]

TASK [agama : Agama container] *************************************************
ok: [vm2]
ok: [vm1]

TASK [agama : Agama container 2] ***********************************************
ok: [vm2]
ok: [vm1]

TASK [nginx : Installing Nginx package] ****************************************
ok: [vm2]
ok: [vm1]

TASK [nginx : Replace the default Nginx conf file] *****************************
ok: [vm1]
ok: [vm2]

TASK [nginx : start nginx] *****************************************************
ok: [vm2]
ok: [vm1]

TASK [haproxy : Install haproxy & keepalived] **********************************
ok: [vm1]
ok: [vm2]

TASK [haproxy : Replace haproxy cfg] *******************************************
ok: [vm2]
ok: [vm1]

TASK [haproxy : Turn on both services] *****************************************
ok: [vm1]
ok: [vm2]

TASK [haproxy_exporter : Install haproxy exporter] *****************************
ok: [vm2]
ok: [vm1]

TASK [haproxy_exporter : Change the default config] ****************************
ok: [vm1]
ok: [vm2]

TASK [keepalived : Install haproxy & keepalived] *******************************
ok: [vm1]
ok: [vm2]

TASK [keepalived : Replace keepalived conf] ************************************
ok: [vm1]
ok: [vm2]

TASK [keepalived : Add the script] *********************************************
ok: [vm1]
ok: [vm2]

TASK [keepalived : Install keepalived monitoring] ******************************
ok: [vm1]
ok: [vm2]

TASK [keepalived : Create keepalived_monitor] **********************************
ok: [vm1]
ok: [vm2]

TASK [keepalived : Start "{{ item }}"] *****************************************
ok: [vm1] => (item=keepalived)
ok: [vm2] => (item=keepalived)
ok: [vm1] => (item=keepalived_monitor)
ok: [vm2] => (item=keepalived_monitor)

PLAY [Prometheus] **************************************************************

TASK [prometheus : Install APT package] ****************************************
ok: [vm1]

TASK [prometheus : Configure the template] *************************************
ok: [vm1]

TASK [prometheus : Configure the prometheus config] ****************************
ok: [vm1]

TASK [prometheus : start prometheus] *******************************************
ok: [vm1]

PLAY [MYSQL servers] ***********************************************************

TASK [mysql : Install MYSQL-server] ********************************************
ok: [vm1]
ok: [vm2]

TASK [mysql : Replace the default mysql conf file] *****************************
ok: [vm1]
ok: [vm2]

TASK [mysql : start mysql server] **********************************************
ok: [vm1]
ok: [vm2]

TASK [mysql : MySQL database for Agama] ****************************************
ok: [vm1]
ok: [vm2]

TASK [mysql : MySQL user for Agama] ********************************************
ok: [vm2]
ok: [vm1]

TASK [mysql : MySQL user for replication] **************************************
ok: [vm2]
ok: [vm1]

TASK [mysql : Read only ON/OFF] ************************************************
ok: [vm2]
ok: [vm1]

TASK [mysql_exporter : MySQL user] *********************************************
ok: [vm1]
ok: [vm2]

TASK [mysql_exporter : Create config] ******************************************
ok: [vm1]
ok: [vm2]

TASK [mysql_exporter : Install mysqld exporter] ********************************
ok: [vm2]
ok: [vm1]

TASK [mysql_exporter : Verify exporter is running] *****************************
ok: [vm1]
ok: [vm2]

TASK [mysql_exporter : Change slave config] ************************************
ok: [vm2]
ok: [vm1]

TASK [mysql_backup : create directory] *****************************************
ok: [vm1]
ok: [vm2]

TASK [mysql_backup : Replace mysql conf file] **********************************
ok: [vm1]
ok: [vm2]

TASK [mysql_backup : MySQL user] ***********************************************
ok: [vm1]
ok: [vm2]

TASK [mysql_backup : Make a cronjob] *******************************************
ok: [vm1]
ok: [vm2]

PLAY [Exporters] ***************************************************************

TASK [Gathering Facts] *********************************************************
ok: [vm2]
ok: [vm1]

TASK [nginx : Installing Nginx package] ****************************************
ok: [vm1]
ok: [vm2]

TASK [nginx : Replace the default Nginx conf file] *****************************
ok: [vm1]
ok: [vm2]

TASK [nginx : start nginx] *****************************************************
ok: [vm1]
ok: [vm2]

TASK [nginx_exporter : Install nginx-exporter] *********************************
ok: [vm1]
ok: [vm2]

TASK [nginx_exporter : Verify exporter is running] *****************************
ok: [vm1]
ok: [vm2]

PLAY [Grafana] *****************************************************************

TASK [grafana : Create all Grafana directories] ********************************
ok: [vm1] => (item=/opt/grafana)
ok: [vm1] => (item=/opt/grafana/provisioning/dashboards)
ok: [vm1] => (item=/opt/grafana/provisioning/datasources)

TASK [grafana : Grafana config] ************************************************
ok: [vm1]

TASK [grafana : Grafana datasources] *******************************************
ok: [vm1] => (item=sample.yaml)
ok: [vm1] => (item=latency.yaml)
ok: [vm1] => (item=telegraf.yaml)

TASK [grafana : Grafana dashboard] *********************************************
ok: [vm1]

TASK [grafana : Grafana dashboard panels] **************************************
ok: [vm1] => (item=main.json)
ok: [vm1] => (item=mysql.json)
ok: [vm1] => (item=syslog.json)

TASK [grafana : Grafana Docker container] **************************************
ok: [vm1]

PLAY [Loggers] *****************************************************************

TASK [pinger : Install fping] **************************************************
ok: [vm2]
ok: [vm1]

TASK [pinger : Add the user "pinger" and generate keys] ************************
ok: [vm2]
ok: [vm1]

TASK [pinger : Copy pinger conf] ***********************************************
ok: [vm2]
ok: [vm1]

TASK [pinger : Copy the pinger.sh] *********************************************
ok: [vm2]
ok: [vm1]

TASK [pinger : Create a pinger.service] ****************************************
ok: [vm2]
ok: [vm1]

TASK [pinger : Start & enable the pinger if not started] ***********************
ok: [vm2]
ok: [vm1]

PLAY [influxdb_servers] ********************************************************

TASK [Gathering Facts] *********************************************************
ok: [vm2]

TASK [influxdb : Add an Apt signing key, uses whichever key is at the URL] *****
ok: [vm2]

TASK [influxdb : add this repo for stable release] *****************************
ok: [vm2]

TASK [influxdb : Install influxdb and telegraf] ********************************
ok: [vm2]

TASK [influxdb : Configure influxdb] *******************************************
ok: [vm2]

TASK [influxdb : Configure telegraf] *******************************************
ok: [vm2]

TASK [influxdb : Verify apps are running] **************************************
ok: [vm2] => (item=influxdb)
ok: [vm2] => (item=telegraf)

TASK [influxdb_backup : create influxdb dir] ***********************************
ok: [vm2]

TASK [influxdb_backup : create restore dir] ************************************
ok: [vm2]

TASK [influxdb_backup : Make a cronjob] ****************************************
ok: [vm2]

TASK [influxdb_exporter : Download binary file] ********************************
ok: [vm2]

TASK [influxdb_exporter : Create influxdb_exporter service] ********************
ok: [vm2]

TASK [influxdb_exporter : Copy influxdb_exporter.sh] ***************************
ok: [vm2]

TASK [influxdb_exporter : Start influxdb_exporter] *****************************
ok: [vm2]

PLAY RECAP *********************************************************************
vm1                        : ok=85   changed=0    unreachable=0    failed=0    skipped=2    rescued=0    ignored=0   
vm2                        : ok=94   changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   

+ ansible all -b -m reboot -a test_command=uptime
vm2 | CHANGED => {
    "changed": true,
    "elapsed": 37,
    "rebooted": true
}
vm1 | CHANGED => {
    "changed": true,
    "elapsed": 41,
    "rebooted": true
}
+ ansible-playbook infra.yaml --diff

PLAY [Setup] *******************************************************************

TASK [Gathering Facts] *********************************************************
ok: [vm2]
ok: [vm1]

TASK [init : Update APT cache] *************************************************
ok: [vm2]
ok: [vm1]

TASK [init : hostname] *********************************************************
ok: [vm2]
ok: [vm1]

TASK [node_exporter : Install APT package] *************************************
ok: [vm2]
ok: [vm1]

TASK [node_exporter : Enable node exporter] ************************************
ok: [vm2]
ok: [vm1]

TASK [rsyslog : Install Rsyslog] ***********************************************
ok: [vm1]
ok: [vm2]

TASK [rsyslog : config rsyslog] ************************************************
ok: [vm1]
ok: [vm2]

TASK [rsyslog : start rsyslog] *************************************************
ok: [vm1]
ok: [vm2]

PLAY [DNS servers] *************************************************************

TASK [Gathering Facts] *********************************************************
ok: [vm2]
ok: [vm1]

TASK [bind : Install bind9] ****************************************************
ok: [vm2]
ok: [vm1]

TASK [bind : Installing the options] *******************************************
ok: [vm2]
ok: [vm1]

TASK [bind : Installing the db.domain] *****************************************
skipping: [vm1]
ok: [vm2]

TASK [bind : Installing the db.reverse] ****************************************
skipping: [vm1]
ok: [vm2]

TASK [bind : Installing the local] *********************************************
ok: [vm2]
ok: [vm1]

TASK [bind_exporter : Install bind9 exporter] **********************************
ok: [vm1]
ok: [vm2]

TASK [bind_exporter : Verify bind9 exporter is running] ************************
ok: [vm2]
ok: [vm1]

PLAY [DNS records] *************************************************************

TASK [Gathering Facts] *********************************************************
ok: [vm2]

TASK [dns_records : Set A records] *********************************************
ok: [vm2] => (item={'key': 'backup', 'value': '192.168.42.156'})

TASK [dns_records : Set CNAME records] *****************************************
ok: [vm2] => (item={'key': 'grafana', 'value': 'vm1'})
ok: [vm2] => (item={'key': 'influxdb', 'value': 'vm2'})
ok: [vm2] => (item={'key': '1b1', 'value': 'vm1'})
ok: [vm2] => (item={'key': '1b2', 'value': 'vm2'})
ok: [vm2] => (item={'key': 'mysql1', 'value': 'vm1'})
ok: [vm2] => (item={'key': 'mysql2', 'value': 'vm2'})
ok: [vm2] => (item={'key': 'ns1', 'value': 'vm2'})
ok: [vm2] => (item={'key': 'prometheus', 'value': 'vm1'})
ok: [vm2] => (item={'key': 'web1', 'value': 'vm1'})
ok: [vm2] => (item={'key': 'web2', 'value': 'vm2'})

PLAY [Init] ********************************************************************

TASK [Gathering Facts] *********************************************************
ok: [vm1]
ok: [vm2]

TASK [init : Update APT cache] *************************************************
ok: [vm2]
ok: [vm1]

TASK [init : hostname] *********************************************************
ok: [vm1]
ok: [vm2]

TASK [backup : Add the user "backup" and generate keys] ************************
ok: [vm2]
ok: [vm1]

TASK [backup : ansible create directory] ***************************************
ok: [vm2]
ok: [vm1]

TASK [backup : Install duplicity] **********************************************
ok: [vm2]
ok: [vm1]

TASK [backup : Touch a ssh known hosts file] ***********************************
ok: [vm2]
ok: [vm1]

TASK [docker : Docker package] *************************************************
ok: [vm1]
ok: [vm2]

TASK [docker : IPtables template] **********************************************
ok: [vm1]
ok: [vm2]

TASK [docker : Iptables restore] ***********************************************
[WARNING]: Attempts to restore iptables state without rollback in case of
mistake may lead the ansible controller to loose access to the hosts and never
regain it before fixing firewall rules through a serial console, or any other
way except SSH. Please set task attribute 'poll' (=15) to 0, and 'async' (=0)
to a value >2 and not greater than 'ansible_timeout' (=10) (recommended).
[WARNING]: Attempts to restore iptables state without rollback in case of
mistake may lead the ansible controller to loose access to the hosts and never
regain it before fixing firewall rules through a serial console, or any other
way except SSH. Please set task attribute 'poll' (=15) to 0, and 'async' (=0)
to a value >2 and not greater than 'ansible_timeout' (=10) (recommended).
ok: [vm1]
ok: [vm2]

TASK [docker : Docker service] *************************************************
ok: [vm2]
ok: [vm1]

TASK [dns_resolve : replace with new resolv file] ******************************
ok: [vm1]
ok: [vm2]

PLAY [Web server] **************************************************************

TASK [Gathering Facts] *********************************************************
ok: [vm2]
ok: [vm1]

TASK [agama : Linux user agama] ************************************************
ok: [vm1]
ok: [vm2]

TASK [agama : Dir for agama] ***************************************************
ok: [vm1]
ok: [vm2]

TASK [agama : Download the app] ************************************************
ok: [vm1]
ok: [vm2]

TASK [agama : Build Agama image] ***********************************************
ok: [vm2]
ok: [vm1]

TASK [agama : Agama container] *************************************************
ok: [vm2]
ok: [vm1]

TASK [agama : Agama container 2] ***********************************************
ok: [vm2]
ok: [vm1]

TASK [nginx : Installing Nginx package] ****************************************
ok: [vm1]
ok: [vm2]

TASK [nginx : Replace the default Nginx conf file] *****************************
ok: [vm1]
ok: [vm2]

TASK [nginx : start nginx] *****************************************************
ok: [vm2]
ok: [vm1]

TASK [haproxy : Install haproxy & keepalived] **********************************
ok: [vm1]
ok: [vm2]

TASK [haproxy : Replace haproxy cfg] *******************************************
ok: [vm1]
ok: [vm2]

TASK [haproxy : Turn on both services] *****************************************
ok: [vm2]
ok: [vm1]

TASK [haproxy_exporter : Install haproxy exporter] *****************************
ok: [vm1]
ok: [vm2]

TASK [haproxy_exporter : Change the default config] ****************************
ok: [vm2]
ok: [vm1]

TASK [keepalived : Install haproxy & keepalived] *******************************
ok: [vm1]
ok: [vm2]

TASK [keepalived : Replace keepalived conf] ************************************
ok: [vm1]
ok: [vm2]

TASK [keepalived : Add the script] *********************************************
ok: [vm1]
ok: [vm2]

TASK [keepalived : Install keepalived monitoring] ******************************
ok: [vm2]
ok: [vm1]

TASK [keepalived : Create keepalived_monitor] **********************************
ok: [vm1]
ok: [vm2]

TASK [keepalived : Start "{{ item }}"] *****************************************
ok: [vm1] => (item=keepalived)
ok: [vm2] => (item=keepalived)
ok: [vm1] => (item=keepalived_monitor)
ok: [vm2] => (item=keepalived_monitor)

PLAY [Prometheus] **************************************************************

TASK [prometheus : Install APT package] ****************************************
ok: [vm1]

TASK [prometheus : Configure the template] *************************************
ok: [vm1]

TASK [prometheus : Configure the prometheus config] ****************************
ok: [vm1]

TASK [prometheus : start prometheus] *******************************************
ok: [vm1]

PLAY [MYSQL servers] ***********************************************************

TASK [mysql : Install MYSQL-server] ********************************************
ok: [vm2]
ok: [vm1]

TASK [mysql : Replace the default mysql conf file] *****************************
ok: [vm1]
ok: [vm2]

TASK [mysql : start mysql server] **********************************************
ok: [vm1]
ok: [vm2]

TASK [mysql : MySQL database for Agama] ****************************************
ok: [vm2]
ok: [vm1]

TASK [mysql : MySQL user for Agama] ********************************************
ok: [vm1]
ok: [vm2]

TASK [mysql : MySQL user for replication] **************************************
ok: [vm2]
ok: [vm1]

TASK [mysql : Read only ON/OFF] ************************************************
ok: [vm1]
ok: [vm2]

TASK [mysql_exporter : MySQL user] *********************************************
ok: [vm2]
ok: [vm1]

TASK [mysql_exporter : Create config] ******************************************
ok: [vm1]
ok: [vm2]

TASK [mysql_exporter : Install mysqld exporter] ********************************
ok: [vm1]
ok: [vm2]

TASK [mysql_exporter : Verify exporter is running] *****************************
ok: [vm2]
ok: [vm1]

TASK [mysql_exporter : Change slave config] ************************************
ok: [vm1]
ok: [vm2]

TASK [mysql_backup : create directory] *****************************************
ok: [vm1]
ok: [vm2]

TASK [mysql_backup : Replace mysql conf file] **********************************
ok: [vm1]
ok: [vm2]

TASK [mysql_backup : MySQL user] ***********************************************
ok: [vm1]
ok: [vm2]

TASK [mysql_backup : Make a cronjob] *******************************************
ok: [vm2]
ok: [vm1]

PLAY [Exporters] ***************************************************************

TASK [Gathering Facts] *********************************************************
ok: [vm2]
ok: [vm1]

TASK [nginx : Installing Nginx package] ****************************************
ok: [vm2]
ok: [vm1]

TASK [nginx : Replace the default Nginx conf file] *****************************
ok: [vm1]
ok: [vm2]

TASK [nginx : start nginx] *****************************************************
ok: [vm1]
ok: [vm2]

TASK [nginx_exporter : Install nginx-exporter] *********************************
ok: [vm1]
ok: [vm2]

TASK [nginx_exporter : Verify exporter is running] *****************************
ok: [vm1]
ok: [vm2]

PLAY [Grafana] *****************************************************************

TASK [grafana : Create all Grafana directories] ********************************
ok: [vm1] => (item=/opt/grafana)
ok: [vm1] => (item=/opt/grafana/provisioning/dashboards)
ok: [vm1] => (item=/opt/grafana/provisioning/datasources)

TASK [grafana : Grafana config] ************************************************
ok: [vm1]

TASK [grafana : Grafana datasources] *******************************************
ok: [vm1] => (item=sample.yaml)
ok: [vm1] => (item=latency.yaml)
ok: [vm1] => (item=telegraf.yaml)

TASK [grafana : Grafana dashboard] *********************************************
ok: [vm1]

TASK [grafana : Grafana dashboard panels] **************************************
ok: [vm1] => (item=main.json)
ok: [vm1] => (item=mysql.json)
ok: [vm1] => (item=syslog.json)

TASK [grafana : Grafana Docker container] **************************************
ok: [vm1]

PLAY [Loggers] *****************************************************************

TASK [pinger : Install fping] **************************************************
ok: [vm1]
ok: [vm2]

TASK [pinger : Add the user "pinger" and generate keys] ************************
ok: [vm1]
ok: [vm2]

TASK [pinger : Copy pinger conf] ***********************************************
ok: [vm2]
ok: [vm1]

TASK [pinger : Copy the pinger.sh] *********************************************
ok: [vm1]
ok: [vm2]

TASK [pinger : Create a pinger.service] ****************************************
ok: [vm1]
ok: [vm2]

TASK [pinger : Start & enable the pinger if not started] ***********************
ok: [vm1]
ok: [vm2]

PLAY [influxdb_servers] ********************************************************

TASK [Gathering Facts] *********************************************************
ok: [vm2]

TASK [influxdb : Add an Apt signing key, uses whichever key is at the URL] *****
ok: [vm2]

TASK [influxdb : add this repo for stable release] *****************************
ok: [vm2]

TASK [influxdb : Install influxdb and telegraf] ********************************
ok: [vm2]

TASK [influxdb : Configure influxdb] *******************************************
ok: [vm2]

TASK [influxdb : Configure telegraf] *******************************************
ok: [vm2]

TASK [influxdb : Verify apps are running] **************************************
ok: [vm2] => (item=influxdb)
ok: [vm2] => (item=telegraf)

TASK [influxdb_backup : create influxdb dir] ***********************************
ok: [vm2]

TASK [influxdb_backup : create restore dir] ************************************
ok: [vm2]

TASK [influxdb_backup : Make a cronjob] ****************************************
ok: [vm2]

TASK [influxdb_exporter : Download binary file] ********************************
ok: [vm2]

TASK [influxdb_exporter : Create influxdb_exporter service] ********************
ok: [vm2]

TASK [influxdb_exporter : Copy influxdb_exporter.sh] ***************************
ok: [vm2]

TASK [influxdb_exporter : Start influxdb_exporter] *****************************
ok: [vm2]

PLAY RECAP *********************************************************************
vm1                        : ok=85   changed=0    unreachable=0    failed=0    skipped=2    rescued=0    ignored=0   
vm2                        : ok=94   changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   

+ date
Wed Dec  8 19:05:51 EET 2021
